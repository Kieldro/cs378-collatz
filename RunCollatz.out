==20966== Memcheck, a memory error detector
==20966== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==20966== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with -h for copyright info
==20966== Command: RunCollatz.c++.app
==20966== 
1 1 1
1 1 1
2 2 2
1 2 2
2 3 8
4 8 17
1 4 8
8 1 17
10 20 21
10 2 20
20 100 119
200 125 125
201 210 89
89 900 179
1000 174 179
1 1001 179
179 1001 179
2001 182 182
2001 3001 217
217 3001 217
4001 238 238
==20966== Invalid read of size 4
==20966==    at 0x400B9F: cycleLength(int) (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==    by 0x400CAF: collatz_eval(int, int) (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==    by 0x400DDD: collatz_solve(std::istream&, std::ostream&) (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==    by 0x400E36: main (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==  Address 0xa10244 is not stack'd, malloc'd or (recently) free'd
==20966== 
==20966== 
==20966== Process terminating with default action of signal 11 (SIGSEGV)
==20966==  Access not within mapped region at address 0xA10244
==20966==    at 0x400B9F: cycleLength(int) (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==    by 0x400CAF: collatz_eval(int, int) (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==    by 0x400DDD: collatz_solve(std::istream&, std::ostream&) (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==    by 0x400E36: main (in /v/filer4b/v38q001/keo/cs378/cs378-collatz/RunCollatz.c++.app)
==20966==  If you believe this happened as a result of a stack
==20966==  overflow in your program's main thread (unlikely but
==20966==  possible), you can try to increase the size of the
==20966==  main thread stack using the --main-stacksize= flag.
==20966==  The main thread stack size used in this run was 8388608.
==20966== 
==20966== HEAP SUMMARY:
==20966==     in use at exit: 122,880 bytes in 6 blocks
==20966==   total heap usage: 6 allocs, 0 frees, 122,880 bytes allocated
==20966== 
==20966== LEAK SUMMARY:
==20966==    definitely lost: 0 bytes in 0 blocks
==20966==    indirectly lost: 0 bytes in 0 blocks
==20966==      possibly lost: 0 bytes in 0 blocks
==20966==    still reachable: 122,880 bytes in 6 blocks
==20966==         suppressed: 0 bytes in 0 blocks
==20966== Rerun with --leak-check=full to see details of leaked memory
==20966== 
==20966== For counts of detected and suppressed errors, rerun with: -v
==20966== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)
